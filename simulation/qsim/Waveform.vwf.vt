// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2023 15:43:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sc_interrupt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sc_interrupt_vlg_sample_tst(
	CLK_50,
	intr,
	mem_clk,
	resetn,
	sampler_tx
);
input  CLK_50;
input  intr;
input  mem_clk;
input  resetn;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_50 or intr or mem_clk or resetn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sc_interrupt_vlg_check_tst (
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	aluout,
	inst,
	inta,
	memout,
	overflow,
	pc,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [31:0] aluout;
input [31:0] inst;
input  inta;
input [31:0] memout;
input  overflow;
input [31:0] pc;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [31:0] aluout_expected;
reg [31:0] inst_expected;
reg  inta_expected;
reg [31:0] memout_expected;
reg  overflow_expected;
reg [31:0] pc_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [31:0] aluout_prev;
reg [31:0] inst_prev;
reg  inta_prev;
reg [31:0] memout_prev;
reg  overflow_prev;
reg [31:0] pc_prev;

reg [31:0] aluout_expected_prev;
reg [31:0] inst_expected_prev;
reg  inta_expected_prev;
reg [31:0] memout_expected_prev;
reg  overflow_expected_prev;
reg [31:0] pc_expected_prev;

reg [31:0] last_aluout_exp;
reg [31:0] last_inst_exp;
reg  last_inta_exp;
reg [31:0] last_memout_exp;
reg  last_overflow_exp;
reg [31:0] last_pc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	aluout_prev = aluout;
	inst_prev = inst;
	inta_prev = inta;
	memout_prev = memout;
	overflow_prev = overflow;
	pc_prev = pc;
end

// update expected /o prevs

always @(trigger)
begin
	aluout_expected_prev = aluout_expected;
	inst_expected_prev = inst_expected;
	inta_expected_prev = inta_expected;
	memout_expected_prev = memout_expected;
	overflow_expected_prev = overflow_expected;
	pc_expected_prev = pc_expected;
end



// expected inta
initial
begin
	inta_expected = 1'bX;
end 
// expected pc[ 31 ]
initial
begin
	pc_expected[31] = 1'bX;
end 
// expected pc[ 30 ]
initial
begin
	pc_expected[30] = 1'bX;
end 
// expected pc[ 29 ]
initial
begin
	pc_expected[29] = 1'bX;
end 
// expected pc[ 28 ]
initial
begin
	pc_expected[28] = 1'bX;
end 
// expected pc[ 27 ]
initial
begin
	pc_expected[27] = 1'bX;
end 
// expected pc[ 26 ]
initial
begin
	pc_expected[26] = 1'bX;
end 
// expected pc[ 25 ]
initial
begin
	pc_expected[25] = 1'bX;
end 
// expected pc[ 24 ]
initial
begin
	pc_expected[24] = 1'bX;
end 
// expected pc[ 23 ]
initial
begin
	pc_expected[23] = 1'bX;
end 
// expected pc[ 22 ]
initial
begin
	pc_expected[22] = 1'bX;
end 
// expected pc[ 21 ]
initial
begin
	pc_expected[21] = 1'bX;
end 
// expected pc[ 20 ]
initial
begin
	pc_expected[20] = 1'bX;
end 
// expected pc[ 19 ]
initial
begin
	pc_expected[19] = 1'bX;
end 
// expected pc[ 18 ]
initial
begin
	pc_expected[18] = 1'bX;
end 
// expected pc[ 17 ]
initial
begin
	pc_expected[17] = 1'bX;
end 
// expected pc[ 16 ]
initial
begin
	pc_expected[16] = 1'bX;
end 
// expected pc[ 15 ]
initial
begin
	pc_expected[15] = 1'bX;
end 
// expected pc[ 14 ]
initial
begin
	pc_expected[14] = 1'bX;
end 
// expected pc[ 13 ]
initial
begin
	pc_expected[13] = 1'bX;
end 
// expected pc[ 12 ]
initial
begin
	pc_expected[12] = 1'bX;
end 
// expected pc[ 11 ]
initial
begin
	pc_expected[11] = 1'bX;
end 
// expected pc[ 10 ]
initial
begin
	pc_expected[10] = 1'bX;
end 
// expected pc[ 9 ]
initial
begin
	pc_expected[9] = 1'bX;
end 
// expected pc[ 8 ]
initial
begin
	pc_expected[8] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected inst[ 31 ]
initial
begin
	inst_expected[31] = 1'bX;
end 
// expected inst[ 30 ]
initial
begin
	inst_expected[30] = 1'bX;
end 
// expected inst[ 29 ]
initial
begin
	inst_expected[29] = 1'bX;
end 
// expected inst[ 28 ]
initial
begin
	inst_expected[28] = 1'bX;
end 
// expected inst[ 27 ]
initial
begin
	inst_expected[27] = 1'bX;
end 
// expected inst[ 26 ]
initial
begin
	inst_expected[26] = 1'bX;
end 
// expected inst[ 25 ]
initial
begin
	inst_expected[25] = 1'bX;
end 
// expected inst[ 24 ]
initial
begin
	inst_expected[24] = 1'bX;
end 
// expected inst[ 23 ]
initial
begin
	inst_expected[23] = 1'bX;
end 
// expected inst[ 22 ]
initial
begin
	inst_expected[22] = 1'bX;
end 
// expected inst[ 21 ]
initial
begin
	inst_expected[21] = 1'bX;
end 
// expected inst[ 20 ]
initial
begin
	inst_expected[20] = 1'bX;
end 
// expected inst[ 19 ]
initial
begin
	inst_expected[19] = 1'bX;
end 
// expected inst[ 18 ]
initial
begin
	inst_expected[18] = 1'bX;
end 
// expected inst[ 17 ]
initial
begin
	inst_expected[17] = 1'bX;
end 
// expected inst[ 16 ]
initial
begin
	inst_expected[16] = 1'bX;
end 
// expected inst[ 15 ]
initial
begin
	inst_expected[15] = 1'bX;
end 
// expected inst[ 14 ]
initial
begin
	inst_expected[14] = 1'bX;
end 
// expected inst[ 13 ]
initial
begin
	inst_expected[13] = 1'bX;
end 
// expected inst[ 12 ]
initial
begin
	inst_expected[12] = 1'bX;
end 
// expected inst[ 11 ]
initial
begin
	inst_expected[11] = 1'bX;
end 
// expected inst[ 10 ]
initial
begin
	inst_expected[10] = 1'bX;
end 
// expected inst[ 9 ]
initial
begin
	inst_expected[9] = 1'bX;
end 
// expected inst[ 8 ]
initial
begin
	inst_expected[8] = 1'bX;
end 
// expected inst[ 7 ]
initial
begin
	inst_expected[7] = 1'bX;
end 
// expected inst[ 6 ]
initial
begin
	inst_expected[6] = 1'bX;
end 
// expected inst[ 5 ]
initial
begin
	inst_expected[5] = 1'bX;
end 
// expected inst[ 4 ]
initial
begin
	inst_expected[4] = 1'bX;
end 
// expected inst[ 3 ]
initial
begin
	inst_expected[3] = 1'bX;
end 
// expected inst[ 2 ]
initial
begin
	inst_expected[2] = 1'bX;
end 
// expected inst[ 1 ]
initial
begin
	inst_expected[1] = 1'bX;
end 
// expected inst[ 0 ]
initial
begin
	inst_expected[0] = 1'bX;
end 
// expected aluout[ 31 ]
initial
begin
	aluout_expected[31] = 1'bX;
end 
// expected aluout[ 30 ]
initial
begin
	aluout_expected[30] = 1'bX;
end 
// expected aluout[ 29 ]
initial
begin
	aluout_expected[29] = 1'bX;
end 
// expected aluout[ 28 ]
initial
begin
	aluout_expected[28] = 1'bX;
end 
// expected aluout[ 27 ]
initial
begin
	aluout_expected[27] = 1'bX;
end 
// expected aluout[ 26 ]
initial
begin
	aluout_expected[26] = 1'bX;
end 
// expected aluout[ 25 ]
initial
begin
	aluout_expected[25] = 1'bX;
end 
// expected aluout[ 24 ]
initial
begin
	aluout_expected[24] = 1'bX;
end 
// expected aluout[ 23 ]
initial
begin
	aluout_expected[23] = 1'bX;
end 
// expected aluout[ 22 ]
initial
begin
	aluout_expected[22] = 1'bX;
end 
// expected aluout[ 21 ]
initial
begin
	aluout_expected[21] = 1'bX;
end 
// expected aluout[ 20 ]
initial
begin
	aluout_expected[20] = 1'bX;
end 
// expected aluout[ 19 ]
initial
begin
	aluout_expected[19] = 1'bX;
end 
// expected aluout[ 18 ]
initial
begin
	aluout_expected[18] = 1'bX;
end 
// expected aluout[ 17 ]
initial
begin
	aluout_expected[17] = 1'bX;
end 
// expected aluout[ 16 ]
initial
begin
	aluout_expected[16] = 1'bX;
end 
// expected aluout[ 15 ]
initial
begin
	aluout_expected[15] = 1'bX;
end 
// expected aluout[ 14 ]
initial
begin
	aluout_expected[14] = 1'bX;
end 
// expected aluout[ 13 ]
initial
begin
	aluout_expected[13] = 1'bX;
end 
// expected aluout[ 12 ]
initial
begin
	aluout_expected[12] = 1'bX;
end 
// expected aluout[ 11 ]
initial
begin
	aluout_expected[11] = 1'bX;
end 
// expected aluout[ 10 ]
initial
begin
	aluout_expected[10] = 1'bX;
end 
// expected aluout[ 9 ]
initial
begin
	aluout_expected[9] = 1'bX;
end 
// expected aluout[ 8 ]
initial
begin
	aluout_expected[8] = 1'bX;
end 
// expected aluout[ 7 ]
initial
begin
	aluout_expected[7] = 1'bX;
end 
// expected aluout[ 6 ]
initial
begin
	aluout_expected[6] = 1'bX;
end 
// expected aluout[ 5 ]
initial
begin
	aluout_expected[5] = 1'bX;
end 
// expected aluout[ 4 ]
initial
begin
	aluout_expected[4] = 1'bX;
end 
// expected aluout[ 3 ]
initial
begin
	aluout_expected[3] = 1'bX;
end 
// expected aluout[ 2 ]
initial
begin
	aluout_expected[2] = 1'bX;
end 
// expected aluout[ 1 ]
initial
begin
	aluout_expected[1] = 1'bX;
end 
// expected aluout[ 0 ]
initial
begin
	aluout_expected[0] = 1'bX;
end 
// expected memout[ 31 ]
initial
begin
	memout_expected[31] = 1'bX;
end 
// expected memout[ 30 ]
initial
begin
	memout_expected[30] = 1'bX;
end 
// expected memout[ 29 ]
initial
begin
	memout_expected[29] = 1'bX;
end 
// expected memout[ 28 ]
initial
begin
	memout_expected[28] = 1'bX;
end 
// expected memout[ 27 ]
initial
begin
	memout_expected[27] = 1'bX;
end 
// expected memout[ 26 ]
initial
begin
	memout_expected[26] = 1'bX;
end 
// expected memout[ 25 ]
initial
begin
	memout_expected[25] = 1'bX;
end 
// expected memout[ 24 ]
initial
begin
	memout_expected[24] = 1'bX;
end 
// expected memout[ 23 ]
initial
begin
	memout_expected[23] = 1'bX;
end 
// expected memout[ 22 ]
initial
begin
	memout_expected[22] = 1'bX;
end 
// expected memout[ 21 ]
initial
begin
	memout_expected[21] = 1'bX;
end 
// expected memout[ 20 ]
initial
begin
	memout_expected[20] = 1'bX;
end 
// expected memout[ 19 ]
initial
begin
	memout_expected[19] = 1'bX;
end 
// expected memout[ 18 ]
initial
begin
	memout_expected[18] = 1'bX;
end 
// expected memout[ 17 ]
initial
begin
	memout_expected[17] = 1'bX;
end 
// expected memout[ 16 ]
initial
begin
	memout_expected[16] = 1'bX;
end 
// expected memout[ 15 ]
initial
begin
	memout_expected[15] = 1'bX;
end 
// expected memout[ 14 ]
initial
begin
	memout_expected[14] = 1'bX;
end 
// expected memout[ 13 ]
initial
begin
	memout_expected[13] = 1'bX;
end 
// expected memout[ 12 ]
initial
begin
	memout_expected[12] = 1'bX;
end 
// expected memout[ 11 ]
initial
begin
	memout_expected[11] = 1'bX;
end 
// expected memout[ 10 ]
initial
begin
	memout_expected[10] = 1'bX;
end 
// expected memout[ 9 ]
initial
begin
	memout_expected[9] = 1'bX;
end 
// expected memout[ 8 ]
initial
begin
	memout_expected[8] = 1'bX;
end 
// expected memout[ 7 ]
initial
begin
	memout_expected[7] = 1'bX;
end 
// expected memout[ 6 ]
initial
begin
	memout_expected[6] = 1'bX;
end 
// expected memout[ 5 ]
initial
begin
	memout_expected[5] = 1'bX;
end 
// expected memout[ 4 ]
initial
begin
	memout_expected[4] = 1'bX;
end 
// expected memout[ 3 ]
initial
begin
	memout_expected[3] = 1'bX;
end 
// expected memout[ 2 ]
initial
begin
	memout_expected[2] = 1'bX;
end 
// expected memout[ 1 ]
initial
begin
	memout_expected[1] = 1'bX;
end 
// expected memout[ 0 ]
initial
begin
	memout_expected[0] = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or aluout_expected or aluout or inst_expected or inst or inta_expected or inta or memout_expected or memout or overflow_expected or overflow or pc_expected or pc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected aluout = %b | expected inst = %b | expected inta = %b | expected memout = %b | expected overflow = %b | expected pc = %b | ",HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,aluout_expected_prev,inst_expected_prev,inta_expected_prev,memout_expected_prev,overflow_expected_prev,pc_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real aluout = %b | real inst = %b | real inta = %b | real memout = %b | real overflow = %b | real pc = %b | ",HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,aluout_prev,inst_prev,inta_prev,memout_prev,overflow_prev,pc_prev);
`endif
	if (
		( aluout_expected_prev[0] !== 1'bx ) && ( aluout_prev[0] !== aluout_expected_prev[0] )
		&& ((aluout_expected_prev[0] !== last_aluout_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[0] = aluout_expected_prev[0];
	end
	if (
		( aluout_expected_prev[1] !== 1'bx ) && ( aluout_prev[1] !== aluout_expected_prev[1] )
		&& ((aluout_expected_prev[1] !== last_aluout_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[1] = aluout_expected_prev[1];
	end
	if (
		( aluout_expected_prev[2] !== 1'bx ) && ( aluout_prev[2] !== aluout_expected_prev[2] )
		&& ((aluout_expected_prev[2] !== last_aluout_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[2] = aluout_expected_prev[2];
	end
	if (
		( aluout_expected_prev[3] !== 1'bx ) && ( aluout_prev[3] !== aluout_expected_prev[3] )
		&& ((aluout_expected_prev[3] !== last_aluout_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[3] = aluout_expected_prev[3];
	end
	if (
		( aluout_expected_prev[4] !== 1'bx ) && ( aluout_prev[4] !== aluout_expected_prev[4] )
		&& ((aluout_expected_prev[4] !== last_aluout_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[4] = aluout_expected_prev[4];
	end
	if (
		( aluout_expected_prev[5] !== 1'bx ) && ( aluout_prev[5] !== aluout_expected_prev[5] )
		&& ((aluout_expected_prev[5] !== last_aluout_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[5] = aluout_expected_prev[5];
	end
	if (
		( aluout_expected_prev[6] !== 1'bx ) && ( aluout_prev[6] !== aluout_expected_prev[6] )
		&& ((aluout_expected_prev[6] !== last_aluout_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[6] = aluout_expected_prev[6];
	end
	if (
		( aluout_expected_prev[7] !== 1'bx ) && ( aluout_prev[7] !== aluout_expected_prev[7] )
		&& ((aluout_expected_prev[7] !== last_aluout_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[7] = aluout_expected_prev[7];
	end
	if (
		( aluout_expected_prev[8] !== 1'bx ) && ( aluout_prev[8] !== aluout_expected_prev[8] )
		&& ((aluout_expected_prev[8] !== last_aluout_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[8] = aluout_expected_prev[8];
	end
	if (
		( aluout_expected_prev[9] !== 1'bx ) && ( aluout_prev[9] !== aluout_expected_prev[9] )
		&& ((aluout_expected_prev[9] !== last_aluout_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[9] = aluout_expected_prev[9];
	end
	if (
		( aluout_expected_prev[10] !== 1'bx ) && ( aluout_prev[10] !== aluout_expected_prev[10] )
		&& ((aluout_expected_prev[10] !== last_aluout_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[10] = aluout_expected_prev[10];
	end
	if (
		( aluout_expected_prev[11] !== 1'bx ) && ( aluout_prev[11] !== aluout_expected_prev[11] )
		&& ((aluout_expected_prev[11] !== last_aluout_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[11] = aluout_expected_prev[11];
	end
	if (
		( aluout_expected_prev[12] !== 1'bx ) && ( aluout_prev[12] !== aluout_expected_prev[12] )
		&& ((aluout_expected_prev[12] !== last_aluout_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[12] = aluout_expected_prev[12];
	end
	if (
		( aluout_expected_prev[13] !== 1'bx ) && ( aluout_prev[13] !== aluout_expected_prev[13] )
		&& ((aluout_expected_prev[13] !== last_aluout_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[13] = aluout_expected_prev[13];
	end
	if (
		( aluout_expected_prev[14] !== 1'bx ) && ( aluout_prev[14] !== aluout_expected_prev[14] )
		&& ((aluout_expected_prev[14] !== last_aluout_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[14] = aluout_expected_prev[14];
	end
	if (
		( aluout_expected_prev[15] !== 1'bx ) && ( aluout_prev[15] !== aluout_expected_prev[15] )
		&& ((aluout_expected_prev[15] !== last_aluout_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[15] = aluout_expected_prev[15];
	end
	if (
		( aluout_expected_prev[16] !== 1'bx ) && ( aluout_prev[16] !== aluout_expected_prev[16] )
		&& ((aluout_expected_prev[16] !== last_aluout_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[16] = aluout_expected_prev[16];
	end
	if (
		( aluout_expected_prev[17] !== 1'bx ) && ( aluout_prev[17] !== aluout_expected_prev[17] )
		&& ((aluout_expected_prev[17] !== last_aluout_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[17] = aluout_expected_prev[17];
	end
	if (
		( aluout_expected_prev[18] !== 1'bx ) && ( aluout_prev[18] !== aluout_expected_prev[18] )
		&& ((aluout_expected_prev[18] !== last_aluout_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[18] = aluout_expected_prev[18];
	end
	if (
		( aluout_expected_prev[19] !== 1'bx ) && ( aluout_prev[19] !== aluout_expected_prev[19] )
		&& ((aluout_expected_prev[19] !== last_aluout_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[19] = aluout_expected_prev[19];
	end
	if (
		( aluout_expected_prev[20] !== 1'bx ) && ( aluout_prev[20] !== aluout_expected_prev[20] )
		&& ((aluout_expected_prev[20] !== last_aluout_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[20] = aluout_expected_prev[20];
	end
	if (
		( aluout_expected_prev[21] !== 1'bx ) && ( aluout_prev[21] !== aluout_expected_prev[21] )
		&& ((aluout_expected_prev[21] !== last_aluout_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[21] = aluout_expected_prev[21];
	end
	if (
		( aluout_expected_prev[22] !== 1'bx ) && ( aluout_prev[22] !== aluout_expected_prev[22] )
		&& ((aluout_expected_prev[22] !== last_aluout_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[22] = aluout_expected_prev[22];
	end
	if (
		( aluout_expected_prev[23] !== 1'bx ) && ( aluout_prev[23] !== aluout_expected_prev[23] )
		&& ((aluout_expected_prev[23] !== last_aluout_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[23] = aluout_expected_prev[23];
	end
	if (
		( aluout_expected_prev[24] !== 1'bx ) && ( aluout_prev[24] !== aluout_expected_prev[24] )
		&& ((aluout_expected_prev[24] !== last_aluout_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[24] = aluout_expected_prev[24];
	end
	if (
		( aluout_expected_prev[25] !== 1'bx ) && ( aluout_prev[25] !== aluout_expected_prev[25] )
		&& ((aluout_expected_prev[25] !== last_aluout_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[25] = aluout_expected_prev[25];
	end
	if (
		( aluout_expected_prev[26] !== 1'bx ) && ( aluout_prev[26] !== aluout_expected_prev[26] )
		&& ((aluout_expected_prev[26] !== last_aluout_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[26] = aluout_expected_prev[26];
	end
	if (
		( aluout_expected_prev[27] !== 1'bx ) && ( aluout_prev[27] !== aluout_expected_prev[27] )
		&& ((aluout_expected_prev[27] !== last_aluout_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[27] = aluout_expected_prev[27];
	end
	if (
		( aluout_expected_prev[28] !== 1'bx ) && ( aluout_prev[28] !== aluout_expected_prev[28] )
		&& ((aluout_expected_prev[28] !== last_aluout_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[28] = aluout_expected_prev[28];
	end
	if (
		( aluout_expected_prev[29] !== 1'bx ) && ( aluout_prev[29] !== aluout_expected_prev[29] )
		&& ((aluout_expected_prev[29] !== last_aluout_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[29] = aluout_expected_prev[29];
	end
	if (
		( aluout_expected_prev[30] !== 1'bx ) && ( aluout_prev[30] !== aluout_expected_prev[30] )
		&& ((aluout_expected_prev[30] !== last_aluout_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[30] = aluout_expected_prev[30];
	end
	if (
		( aluout_expected_prev[31] !== 1'bx ) && ( aluout_prev[31] !== aluout_expected_prev[31] )
		&& ((aluout_expected_prev[31] !== last_aluout_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_aluout_exp[31] = aluout_expected_prev[31];
	end
	if (
		( inst_expected_prev[0] !== 1'bx ) && ( inst_prev[0] !== inst_expected_prev[0] )
		&& ((inst_expected_prev[0] !== last_inst_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[0] = inst_expected_prev[0];
	end
	if (
		( inst_expected_prev[1] !== 1'bx ) && ( inst_prev[1] !== inst_expected_prev[1] )
		&& ((inst_expected_prev[1] !== last_inst_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[1] = inst_expected_prev[1];
	end
	if (
		( inst_expected_prev[2] !== 1'bx ) && ( inst_prev[2] !== inst_expected_prev[2] )
		&& ((inst_expected_prev[2] !== last_inst_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[2] = inst_expected_prev[2];
	end
	if (
		( inst_expected_prev[3] !== 1'bx ) && ( inst_prev[3] !== inst_expected_prev[3] )
		&& ((inst_expected_prev[3] !== last_inst_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[3] = inst_expected_prev[3];
	end
	if (
		( inst_expected_prev[4] !== 1'bx ) && ( inst_prev[4] !== inst_expected_prev[4] )
		&& ((inst_expected_prev[4] !== last_inst_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[4] = inst_expected_prev[4];
	end
	if (
		( inst_expected_prev[5] !== 1'bx ) && ( inst_prev[5] !== inst_expected_prev[5] )
		&& ((inst_expected_prev[5] !== last_inst_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[5] = inst_expected_prev[5];
	end
	if (
		( inst_expected_prev[6] !== 1'bx ) && ( inst_prev[6] !== inst_expected_prev[6] )
		&& ((inst_expected_prev[6] !== last_inst_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[6] = inst_expected_prev[6];
	end
	if (
		( inst_expected_prev[7] !== 1'bx ) && ( inst_prev[7] !== inst_expected_prev[7] )
		&& ((inst_expected_prev[7] !== last_inst_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[7] = inst_expected_prev[7];
	end
	if (
		( inst_expected_prev[8] !== 1'bx ) && ( inst_prev[8] !== inst_expected_prev[8] )
		&& ((inst_expected_prev[8] !== last_inst_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[8] = inst_expected_prev[8];
	end
	if (
		( inst_expected_prev[9] !== 1'bx ) && ( inst_prev[9] !== inst_expected_prev[9] )
		&& ((inst_expected_prev[9] !== last_inst_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[9] = inst_expected_prev[9];
	end
	if (
		( inst_expected_prev[10] !== 1'bx ) && ( inst_prev[10] !== inst_expected_prev[10] )
		&& ((inst_expected_prev[10] !== last_inst_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[10] = inst_expected_prev[10];
	end
	if (
		( inst_expected_prev[11] !== 1'bx ) && ( inst_prev[11] !== inst_expected_prev[11] )
		&& ((inst_expected_prev[11] !== last_inst_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[11] = inst_expected_prev[11];
	end
	if (
		( inst_expected_prev[12] !== 1'bx ) && ( inst_prev[12] !== inst_expected_prev[12] )
		&& ((inst_expected_prev[12] !== last_inst_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[12] = inst_expected_prev[12];
	end
	if (
		( inst_expected_prev[13] !== 1'bx ) && ( inst_prev[13] !== inst_expected_prev[13] )
		&& ((inst_expected_prev[13] !== last_inst_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[13] = inst_expected_prev[13];
	end
	if (
		( inst_expected_prev[14] !== 1'bx ) && ( inst_prev[14] !== inst_expected_prev[14] )
		&& ((inst_expected_prev[14] !== last_inst_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[14] = inst_expected_prev[14];
	end
	if (
		( inst_expected_prev[15] !== 1'bx ) && ( inst_prev[15] !== inst_expected_prev[15] )
		&& ((inst_expected_prev[15] !== last_inst_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[15] = inst_expected_prev[15];
	end
	if (
		( inst_expected_prev[16] !== 1'bx ) && ( inst_prev[16] !== inst_expected_prev[16] )
		&& ((inst_expected_prev[16] !== last_inst_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[16] = inst_expected_prev[16];
	end
	if (
		( inst_expected_prev[17] !== 1'bx ) && ( inst_prev[17] !== inst_expected_prev[17] )
		&& ((inst_expected_prev[17] !== last_inst_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[17] = inst_expected_prev[17];
	end
	if (
		( inst_expected_prev[18] !== 1'bx ) && ( inst_prev[18] !== inst_expected_prev[18] )
		&& ((inst_expected_prev[18] !== last_inst_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[18] = inst_expected_prev[18];
	end
	if (
		( inst_expected_prev[19] !== 1'bx ) && ( inst_prev[19] !== inst_expected_prev[19] )
		&& ((inst_expected_prev[19] !== last_inst_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[19] = inst_expected_prev[19];
	end
	if (
		( inst_expected_prev[20] !== 1'bx ) && ( inst_prev[20] !== inst_expected_prev[20] )
		&& ((inst_expected_prev[20] !== last_inst_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[20] = inst_expected_prev[20];
	end
	if (
		( inst_expected_prev[21] !== 1'bx ) && ( inst_prev[21] !== inst_expected_prev[21] )
		&& ((inst_expected_prev[21] !== last_inst_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[21] = inst_expected_prev[21];
	end
	if (
		( inst_expected_prev[22] !== 1'bx ) && ( inst_prev[22] !== inst_expected_prev[22] )
		&& ((inst_expected_prev[22] !== last_inst_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[22] = inst_expected_prev[22];
	end
	if (
		( inst_expected_prev[23] !== 1'bx ) && ( inst_prev[23] !== inst_expected_prev[23] )
		&& ((inst_expected_prev[23] !== last_inst_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[23] = inst_expected_prev[23];
	end
	if (
		( inst_expected_prev[24] !== 1'bx ) && ( inst_prev[24] !== inst_expected_prev[24] )
		&& ((inst_expected_prev[24] !== last_inst_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[24] = inst_expected_prev[24];
	end
	if (
		( inst_expected_prev[25] !== 1'bx ) && ( inst_prev[25] !== inst_expected_prev[25] )
		&& ((inst_expected_prev[25] !== last_inst_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[25] = inst_expected_prev[25];
	end
	if (
		( inst_expected_prev[26] !== 1'bx ) && ( inst_prev[26] !== inst_expected_prev[26] )
		&& ((inst_expected_prev[26] !== last_inst_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[26] = inst_expected_prev[26];
	end
	if (
		( inst_expected_prev[27] !== 1'bx ) && ( inst_prev[27] !== inst_expected_prev[27] )
		&& ((inst_expected_prev[27] !== last_inst_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[27] = inst_expected_prev[27];
	end
	if (
		( inst_expected_prev[28] !== 1'bx ) && ( inst_prev[28] !== inst_expected_prev[28] )
		&& ((inst_expected_prev[28] !== last_inst_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[28] = inst_expected_prev[28];
	end
	if (
		( inst_expected_prev[29] !== 1'bx ) && ( inst_prev[29] !== inst_expected_prev[29] )
		&& ((inst_expected_prev[29] !== last_inst_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[29] = inst_expected_prev[29];
	end
	if (
		( inst_expected_prev[30] !== 1'bx ) && ( inst_prev[30] !== inst_expected_prev[30] )
		&& ((inst_expected_prev[30] !== last_inst_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[30] = inst_expected_prev[30];
	end
	if (
		( inst_expected_prev[31] !== 1'bx ) && ( inst_prev[31] !== inst_expected_prev[31] )
		&& ((inst_expected_prev[31] !== last_inst_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inst_exp[31] = inst_expected_prev[31];
	end
	if (
		( inta_expected_prev !== 1'bx ) && ( inta_prev !== inta_expected_prev )
		&& ((inta_expected_prev !== last_inta_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inta :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inta_expected_prev);
		$display ("     Real value = %b", inta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_inta_exp = inta_expected_prev;
	end
	if (
		( memout_expected_prev[0] !== 1'bx ) && ( memout_prev[0] !== memout_expected_prev[0] )
		&& ((memout_expected_prev[0] !== last_memout_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[0] = memout_expected_prev[0];
	end
	if (
		( memout_expected_prev[1] !== 1'bx ) && ( memout_prev[1] !== memout_expected_prev[1] )
		&& ((memout_expected_prev[1] !== last_memout_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[1] = memout_expected_prev[1];
	end
	if (
		( memout_expected_prev[2] !== 1'bx ) && ( memout_prev[2] !== memout_expected_prev[2] )
		&& ((memout_expected_prev[2] !== last_memout_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[2] = memout_expected_prev[2];
	end
	if (
		( memout_expected_prev[3] !== 1'bx ) && ( memout_prev[3] !== memout_expected_prev[3] )
		&& ((memout_expected_prev[3] !== last_memout_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[3] = memout_expected_prev[3];
	end
	if (
		( memout_expected_prev[4] !== 1'bx ) && ( memout_prev[4] !== memout_expected_prev[4] )
		&& ((memout_expected_prev[4] !== last_memout_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[4] = memout_expected_prev[4];
	end
	if (
		( memout_expected_prev[5] !== 1'bx ) && ( memout_prev[5] !== memout_expected_prev[5] )
		&& ((memout_expected_prev[5] !== last_memout_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[5] = memout_expected_prev[5];
	end
	if (
		( memout_expected_prev[6] !== 1'bx ) && ( memout_prev[6] !== memout_expected_prev[6] )
		&& ((memout_expected_prev[6] !== last_memout_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[6] = memout_expected_prev[6];
	end
	if (
		( memout_expected_prev[7] !== 1'bx ) && ( memout_prev[7] !== memout_expected_prev[7] )
		&& ((memout_expected_prev[7] !== last_memout_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[7] = memout_expected_prev[7];
	end
	if (
		( memout_expected_prev[8] !== 1'bx ) && ( memout_prev[8] !== memout_expected_prev[8] )
		&& ((memout_expected_prev[8] !== last_memout_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[8] = memout_expected_prev[8];
	end
	if (
		( memout_expected_prev[9] !== 1'bx ) && ( memout_prev[9] !== memout_expected_prev[9] )
		&& ((memout_expected_prev[9] !== last_memout_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[9] = memout_expected_prev[9];
	end
	if (
		( memout_expected_prev[10] !== 1'bx ) && ( memout_prev[10] !== memout_expected_prev[10] )
		&& ((memout_expected_prev[10] !== last_memout_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[10] = memout_expected_prev[10];
	end
	if (
		( memout_expected_prev[11] !== 1'bx ) && ( memout_prev[11] !== memout_expected_prev[11] )
		&& ((memout_expected_prev[11] !== last_memout_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[11] = memout_expected_prev[11];
	end
	if (
		( memout_expected_prev[12] !== 1'bx ) && ( memout_prev[12] !== memout_expected_prev[12] )
		&& ((memout_expected_prev[12] !== last_memout_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[12] = memout_expected_prev[12];
	end
	if (
		( memout_expected_prev[13] !== 1'bx ) && ( memout_prev[13] !== memout_expected_prev[13] )
		&& ((memout_expected_prev[13] !== last_memout_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[13] = memout_expected_prev[13];
	end
	if (
		( memout_expected_prev[14] !== 1'bx ) && ( memout_prev[14] !== memout_expected_prev[14] )
		&& ((memout_expected_prev[14] !== last_memout_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[14] = memout_expected_prev[14];
	end
	if (
		( memout_expected_prev[15] !== 1'bx ) && ( memout_prev[15] !== memout_expected_prev[15] )
		&& ((memout_expected_prev[15] !== last_memout_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[15] = memout_expected_prev[15];
	end
	if (
		( memout_expected_prev[16] !== 1'bx ) && ( memout_prev[16] !== memout_expected_prev[16] )
		&& ((memout_expected_prev[16] !== last_memout_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[16] = memout_expected_prev[16];
	end
	if (
		( memout_expected_prev[17] !== 1'bx ) && ( memout_prev[17] !== memout_expected_prev[17] )
		&& ((memout_expected_prev[17] !== last_memout_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[17] = memout_expected_prev[17];
	end
	if (
		( memout_expected_prev[18] !== 1'bx ) && ( memout_prev[18] !== memout_expected_prev[18] )
		&& ((memout_expected_prev[18] !== last_memout_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[18] = memout_expected_prev[18];
	end
	if (
		( memout_expected_prev[19] !== 1'bx ) && ( memout_prev[19] !== memout_expected_prev[19] )
		&& ((memout_expected_prev[19] !== last_memout_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[19] = memout_expected_prev[19];
	end
	if (
		( memout_expected_prev[20] !== 1'bx ) && ( memout_prev[20] !== memout_expected_prev[20] )
		&& ((memout_expected_prev[20] !== last_memout_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[20] = memout_expected_prev[20];
	end
	if (
		( memout_expected_prev[21] !== 1'bx ) && ( memout_prev[21] !== memout_expected_prev[21] )
		&& ((memout_expected_prev[21] !== last_memout_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[21] = memout_expected_prev[21];
	end
	if (
		( memout_expected_prev[22] !== 1'bx ) && ( memout_prev[22] !== memout_expected_prev[22] )
		&& ((memout_expected_prev[22] !== last_memout_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[22] = memout_expected_prev[22];
	end
	if (
		( memout_expected_prev[23] !== 1'bx ) && ( memout_prev[23] !== memout_expected_prev[23] )
		&& ((memout_expected_prev[23] !== last_memout_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[23] = memout_expected_prev[23];
	end
	if (
		( memout_expected_prev[24] !== 1'bx ) && ( memout_prev[24] !== memout_expected_prev[24] )
		&& ((memout_expected_prev[24] !== last_memout_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[24] = memout_expected_prev[24];
	end
	if (
		( memout_expected_prev[25] !== 1'bx ) && ( memout_prev[25] !== memout_expected_prev[25] )
		&& ((memout_expected_prev[25] !== last_memout_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[25] = memout_expected_prev[25];
	end
	if (
		( memout_expected_prev[26] !== 1'bx ) && ( memout_prev[26] !== memout_expected_prev[26] )
		&& ((memout_expected_prev[26] !== last_memout_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[26] = memout_expected_prev[26];
	end
	if (
		( memout_expected_prev[27] !== 1'bx ) && ( memout_prev[27] !== memout_expected_prev[27] )
		&& ((memout_expected_prev[27] !== last_memout_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[27] = memout_expected_prev[27];
	end
	if (
		( memout_expected_prev[28] !== 1'bx ) && ( memout_prev[28] !== memout_expected_prev[28] )
		&& ((memout_expected_prev[28] !== last_memout_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[28] = memout_expected_prev[28];
	end
	if (
		( memout_expected_prev[29] !== 1'bx ) && ( memout_prev[29] !== memout_expected_prev[29] )
		&& ((memout_expected_prev[29] !== last_memout_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[29] = memout_expected_prev[29];
	end
	if (
		( memout_expected_prev[30] !== 1'bx ) && ( memout_prev[30] !== memout_expected_prev[30] )
		&& ((memout_expected_prev[30] !== last_memout_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[30] = memout_expected_prev[30];
	end
	if (
		( memout_expected_prev[31] !== 1'bx ) && ( memout_prev[31] !== memout_expected_prev[31] )
		&& ((memout_expected_prev[31] !== last_memout_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memout_expected_prev);
		$display ("     Real value = %b", memout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_memout_exp[31] = memout_expected_prev[31];
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pc_expected_prev[8] !== 1'bx ) && ( pc_prev[8] !== pc_expected_prev[8] )
		&& ((pc_expected_prev[8] !== last_pc_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[8] = pc_expected_prev[8];
	end
	if (
		( pc_expected_prev[9] !== 1'bx ) && ( pc_prev[9] !== pc_expected_prev[9] )
		&& ((pc_expected_prev[9] !== last_pc_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[9] = pc_expected_prev[9];
	end
	if (
		( pc_expected_prev[10] !== 1'bx ) && ( pc_prev[10] !== pc_expected_prev[10] )
		&& ((pc_expected_prev[10] !== last_pc_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[10] = pc_expected_prev[10];
	end
	if (
		( pc_expected_prev[11] !== 1'bx ) && ( pc_prev[11] !== pc_expected_prev[11] )
		&& ((pc_expected_prev[11] !== last_pc_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[11] = pc_expected_prev[11];
	end
	if (
		( pc_expected_prev[12] !== 1'bx ) && ( pc_prev[12] !== pc_expected_prev[12] )
		&& ((pc_expected_prev[12] !== last_pc_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[12] = pc_expected_prev[12];
	end
	if (
		( pc_expected_prev[13] !== 1'bx ) && ( pc_prev[13] !== pc_expected_prev[13] )
		&& ((pc_expected_prev[13] !== last_pc_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[13] = pc_expected_prev[13];
	end
	if (
		( pc_expected_prev[14] !== 1'bx ) && ( pc_prev[14] !== pc_expected_prev[14] )
		&& ((pc_expected_prev[14] !== last_pc_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[14] = pc_expected_prev[14];
	end
	if (
		( pc_expected_prev[15] !== 1'bx ) && ( pc_prev[15] !== pc_expected_prev[15] )
		&& ((pc_expected_prev[15] !== last_pc_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[15] = pc_expected_prev[15];
	end
	if (
		( pc_expected_prev[16] !== 1'bx ) && ( pc_prev[16] !== pc_expected_prev[16] )
		&& ((pc_expected_prev[16] !== last_pc_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[16] = pc_expected_prev[16];
	end
	if (
		( pc_expected_prev[17] !== 1'bx ) && ( pc_prev[17] !== pc_expected_prev[17] )
		&& ((pc_expected_prev[17] !== last_pc_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[17] = pc_expected_prev[17];
	end
	if (
		( pc_expected_prev[18] !== 1'bx ) && ( pc_prev[18] !== pc_expected_prev[18] )
		&& ((pc_expected_prev[18] !== last_pc_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[18] = pc_expected_prev[18];
	end
	if (
		( pc_expected_prev[19] !== 1'bx ) && ( pc_prev[19] !== pc_expected_prev[19] )
		&& ((pc_expected_prev[19] !== last_pc_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[19] = pc_expected_prev[19];
	end
	if (
		( pc_expected_prev[20] !== 1'bx ) && ( pc_prev[20] !== pc_expected_prev[20] )
		&& ((pc_expected_prev[20] !== last_pc_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[20] = pc_expected_prev[20];
	end
	if (
		( pc_expected_prev[21] !== 1'bx ) && ( pc_prev[21] !== pc_expected_prev[21] )
		&& ((pc_expected_prev[21] !== last_pc_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[21] = pc_expected_prev[21];
	end
	if (
		( pc_expected_prev[22] !== 1'bx ) && ( pc_prev[22] !== pc_expected_prev[22] )
		&& ((pc_expected_prev[22] !== last_pc_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[22] = pc_expected_prev[22];
	end
	if (
		( pc_expected_prev[23] !== 1'bx ) && ( pc_prev[23] !== pc_expected_prev[23] )
		&& ((pc_expected_prev[23] !== last_pc_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[23] = pc_expected_prev[23];
	end
	if (
		( pc_expected_prev[24] !== 1'bx ) && ( pc_prev[24] !== pc_expected_prev[24] )
		&& ((pc_expected_prev[24] !== last_pc_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[24] = pc_expected_prev[24];
	end
	if (
		( pc_expected_prev[25] !== 1'bx ) && ( pc_prev[25] !== pc_expected_prev[25] )
		&& ((pc_expected_prev[25] !== last_pc_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[25] = pc_expected_prev[25];
	end
	if (
		( pc_expected_prev[26] !== 1'bx ) && ( pc_prev[26] !== pc_expected_prev[26] )
		&& ((pc_expected_prev[26] !== last_pc_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[26] = pc_expected_prev[26];
	end
	if (
		( pc_expected_prev[27] !== 1'bx ) && ( pc_prev[27] !== pc_expected_prev[27] )
		&& ((pc_expected_prev[27] !== last_pc_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[27] = pc_expected_prev[27];
	end
	if (
		( pc_expected_prev[28] !== 1'bx ) && ( pc_prev[28] !== pc_expected_prev[28] )
		&& ((pc_expected_prev[28] !== last_pc_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[28] = pc_expected_prev[28];
	end
	if (
		( pc_expected_prev[29] !== 1'bx ) && ( pc_prev[29] !== pc_expected_prev[29] )
		&& ((pc_expected_prev[29] !== last_pc_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[29] = pc_expected_prev[29];
	end
	if (
		( pc_expected_prev[30] !== 1'bx ) && ( pc_prev[30] !== pc_expected_prev[30] )
		&& ((pc_expected_prev[30] !== last_pc_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[30] = pc_expected_prev[30];
	end
	if (
		( pc_expected_prev[31] !== 1'bx ) && ( pc_prev[31] !== pc_expected_prev[31] )
		&& ((pc_expected_prev[31] !== last_pc_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pc_exp[31] = pc_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sc_interrupt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_50;
reg intr;
reg mem_clk;
reg resetn;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [31:0] aluout;
wire [31:0] inst;
wire inta;
wire [31:0] memout;
wire overflow;
wire [31:0] pc;

wire sampler;                             

// assign statements (if any)                          
sc_interrupt i1 (
// port map - connection between master ports and signals/registers   
	.CLK_50(CLK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.aluout(aluout),
	.inst(inst),
	.inta(inta),
	.intr(intr),
	.mem_clk(mem_clk),
	.memout(memout),
	.overflow(overflow),
	.pc(pc),
	.resetn(resetn)
);

// resetn
initial
begin
	resetn = 1'b1;
end 

// mem_clk
initial
begin
	mem_clk = 1'b0;
end 

// CLK_50
always
begin
	CLK_50 = 1'b0;
	CLK_50 = #10000 1'b1;
	#10000;
end 

// intr
initial
begin
	intr = 1'b0;
end 

sc_interrupt_vlg_sample_tst tb_sample (
	.CLK_50(CLK_50),
	.intr(intr),
	.mem_clk(mem_clk),
	.resetn(resetn),
	.sampler_tx(sampler)
);

sc_interrupt_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.aluout(aluout),
	.inst(inst),
	.inta(inta),
	.memout(memout),
	.overflow(overflow),
	.pc(pc),
	.sampler_rx(sampler)
);
endmodule

